// 02_paac 
//  paac = Pipeline as a code 
// With this we will add code analysis 
// 1st one is through checks anaysis and the second is sonarqube 
pipeline {
    agent any
    tools {
	    maven "MAVEN3"
	    jdk "OracleJDK8"
	}
    stages{
        stage('Fetch code') {
          steps{
              git branch: 'vp-rem', url:'https://github.com/devopshydclub/vprofile-repo.git'
          }  
        }

        stage('Build') {
            steps {
                sh 'mvn clean install -DskipTests'
            }
            post {
                success {
                    echo "Now Archiving."
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }
        stage('Test'){
            steps {
                sh 'mvn test'
            }

        }

// CHECKS ANALYSIS PIPELINE 
        stage('Checkstyle Analysis'){
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }
// SONAR ANALYSIS PIPELINE 
        stage('Sonar Analysis') {
            environment {
                scannerHome = tool 'sonar4.7'
            }
            steps {
               withSonarQubeEnv('sonar') {
                   sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
              }
            }
        }

// QUALITY GATES PIPELINE IMPLEMENTATION 
        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }

// UPLOADING ARTIFACT TO NEXUAS USING THE PIPELINE  | Video 018 CI Pipeline
        stage('Upload Artifact to Nexus'){
            steps{
                nexusArtifactUploader(
                nexusVersion: 'nexus3',
                protocol: 'http',
                // use private IP in AWS with port. Use private IP as it does not change.
                nexusUrl: '172.31.18.28:8081',
                // if not applicable just give a name.
                groupId: 'QA',
                // it needs to be dynamic such that everytime 
                // we upload an artifact we get unique values. 
                // so does not override previous artificat so we have to variables like TIMESTAMP, BUILD_ID etc.
                // NEED TO SET THEIR VALUES AT JENKINS 
                version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                // repo name refers the one created on the nexus server.
                repository: 'vprofile-repo',
                credentialsId: 'nexuslogin',
                artifacts: [
                    [
                        artifactId: 'vproapp',
                        classifier: '',
                        file: 'target/vprofile-v2.war',
                        type: 'war'
                    ]
                ])
            }
        }
    }
}